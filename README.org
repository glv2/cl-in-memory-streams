#+TITLE: in-memory-streams
#+AUTHOR: Guillaume LE VAILLANT
#+DATE: 2022-09-23
#+EMAIL: glv@posteo.net
#+LANGUAGE: en
#+OPTIONS: num:nil toc:nil html-postamble:nil html-scripts:nil
#+HTML_DOCTYPE: html5

The active repository is at https://codeberg.org/glv/cl-in-memory-streams

* Description

*in-memory-streams* is a library implementing in-memory input streams,
output streams and io streams for any type of elements.

* License

*in-memory-streams* is released under the GPL-3 license or later. See the
 [[LICENSE]] file for details.

* Dependencies

*in-memory-streams* requires:
 - [[https://common-lisp.net/project/trivial-gray-streams][trivial-gray-streams]]

The tests also require:
 - [[https://common-lisp.net/project/fiveam/][fiveam]]

* API

After loading the library with ~(asdf:load-system "in-memory-streams")~ or
~(quicklisp:quickload "in-memory-streams")~, the functions will be available in
the ~in-memory-streams~ package. The shorter ~ims~ nickname can be used instead
of ~in-memory-streams~.

** Input streams

#+BEGIN_SRC lisp
  (make-input-stream seq &key (start 0) end element-type) => stream
#+END_SRC

Return an input stream which will supply the elements of /seq/ between /start/
and /end/ in order.

#+BEGIN_SRC lisp
  (with-input-stream (var seq &key (start 0) end element-type) &body body)
#+END_SRC

Within /body/, /var/ is bound to an input stream defined by /seq/, /start/,
/end/ and /element-type/. The result of the last form of /body/ is returned.

The /read-element/ method should be used to get one element from an input
stream. Using /read-byte/ or /read-char/ on an input stream will also work if
the stream contains respectively integers or characters. Using /read-element/
on a basic stream (i.e. not a ~in-memory-streams::input-stream~) will also work
and call either /read-byte/ or /read-char/ depending on the stream element
type.

#+BEGIN_SRC lisp
  (read-element stream &optional eof-error-p eof-value) => element
#+END_SRC

Like /read-byte/, but for input streams containing any type of elements.

To get several elements from an input stream, the regular /read-sequence/
function can be used.

** Output streams

#+BEGIN_SRC lisp
  (make-output-stream &key element-type) => stream
#+END_SRC

Return an output stream which will accumulate the elements written to it for
the benefit of the /get-elements/ function.

#+BEGIN_SRC lisp
  (with-output-stream (var &key element-type) &body body) => vector
#+END_SRC

Within /body/, /var/ is bound to an output stream. After all the forms in
/body/ have been executed, the elements that have been written to /var/ (and
that haven't been consumed by a call to /get-elements/ within /body/) are
returned.

The ~*initial-buffer-size*~ parameter indicates the initial size to use for the
internal buffer when creating an output stream.

The /write-element/ method should be used to write one element to an output
stream. Using /write-byte/ or /write-char/ on an output stream will also work
if the stream was set to accept respectively integers or characters. Using
/write-element/ on a basic stream (i.e. not
a ~in-memory-streams::output-stream~) will also work and call either
/write-byte/ or /write-char/ depending on the stream element type.

#+BEGIN_SRC lisp
  (write-element element stream) => element
#+END_SRC

Like /write-byte/, but for output streams containing any type of elements.

To write several elements to an output stream, the regular /write-sequence/
function can be used.

#+BEGIN_SRC lisp
  (get-elements stream) => vector
#+END_SRC

Return the elements that were written to a /stream/.

** IO streams

#+BEGIN_SRC lisp
  (make-io-stream &key element-type) => stream
#+END_SRC

Return a stream which will supply the elements that have been written to it in
order.

#+BEGIN_SRC lisp
  (with-io-stream (var &key element-type) &body body)
#+END_SRC

Within /body/, /var/ is bound to an io stream. The result of the last form of
/body/ is returned.

As io streams are at the same time input streams and output streams, the
functions for input streams and for output streams can be used with io streams
(/read-element/, /write-element/...).

** Introspection

#+BEGIN_SRC lisp
  (stream-length stream) => integer
#+END_SRC

Return the number of elements in a /stream/.

#+BEGIN_SRC lisp
  (stream-ref stream index) => element
#+END_SRC

Return the element at /index/ in /stream/ without removing it from /stream/.

#+BEGIN_SRC lisp
  (stream-elements stream) => vector
#+END_SRC

Return a vector containing the elements in /stream/ without removing them
from /stream/.

#+BEGIN_SRC
  (stream-map function stream) => nil
#+END_SRC

Apply /function/ to each element in /stream/ without removing them from
/stream/. Note that the results of applying /function/ to the elements are not
collected. If you need to keep them, your /function/ must take care of that.

* Examples

The following example interleaves the elements of 2 streams.

#+BEGIN_SRC lisp
  (with-input-stream (in1 '(:a :b :c :d :e))
    (with-input-stream (in2 '(0 1 2))
      (with-output-stream (out)
        (loop :for x = (read-element in1 nil nil)
              :for y = (read-element in2 nil nil)
              :while (and x y)
              :do (progn
                    (write-element x out)
                    (write-element y out))))))

=> #(:A 0 :B 1 :C 2)
#+END_SRC

The following example computes a moving average using 3 numbers of the input
stream.

#+BEGIN_SRC lisp
  (defun average (stream)
    (let ((a 0.0d0))
      (stream-map (lambda (x) (incf a x)) stream)
      (/ a (stream-length stream))))

  (defun moving-average (input output n)
    (with-io-stream (s :element-type 'double-float)
      (loop :for x = (read-element input nil nil)
            :while x
            :do (progn
                  (write-element x s)
                  (unless (< (stream-length s) n)
                    (write-element (average s) output)
                    (read-element s))))))

  (defparameter *numbers*
    #(1.1688306397068886d0 1.8379697869542646d0 0.6229625662395764d0
      0.14284584292221325d0 1.396517204140343d0 1.735972750395848d0
      0.7149398779650111d0 1.0309614956803217d0 0.9725293631719216d0
      1.5689075891259785d0))

  (with-input-stream (input *numbers* :element-type 'double-float)
    (with-output-stream (output :element-type 'double-float)
      (moving-average input output 3)))

=> #(1.2099209976335765d0 0.8679260653720181d0 0.7207752044340442d0
     1.0917785991528015d0 1.282476610833734d0 1.1606247080137269d0
     0.9061435789390848d0 1.1907994826594073d0)
#+END_SRC

* Tests

The tests can be run with ~(asdf:test-system "in-memory-streams")~.
